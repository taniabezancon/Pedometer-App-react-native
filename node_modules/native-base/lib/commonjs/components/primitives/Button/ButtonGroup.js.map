{"version":3,"sources":["ButtonGroup.tsx"],"names":["children","divider","variant","props","ref","space","direction","size","colorScheme","isDisabled","isAttached","newProps","borderRadius","computedChildren","Array","isArray","React","Children","map","child","index","type","displayName","cloneElement","key","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth","toArray"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren: JSX.Element | JSX.Element[];\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.map(\n          children,\n          (child: any, index: number) => {\n            if (child?.type?.displayName === 'Button') {\n              return React.cloneElement(child, {\n                key: `button-group-child-${index}`,\n                variant,\n                size,\n                colorScheme,\n                isDisabled,\n\n                // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n                ...(isAttached ? { borderRadius: 0 } : {}),\n                ...(isAttached && index === 0\n                  ? direction === 'column'\n                    ? { borderTopRadius: borderRadius }\n                    : { borderLeftRadius: borderRadius }\n                  : {}),\n                ...(isAttached && index === children?.length - 1\n                  ? direction === 'column'\n                    ? { borderBottomRadius: borderRadius }\n                    : { borderRightRadius: borderRadius }\n                  : {}),\n\n                //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n                ...(isAttached && index !== 0\n                  ? direction === 'column'\n                    ? { borderTopWidth: 0 }\n                    : { borderLeftWidth: 0 }\n                  : {}),\n                ...child.props,\n              });\n            } else {\n              return child;\n            }\n          }\n        );\n      } else {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]}