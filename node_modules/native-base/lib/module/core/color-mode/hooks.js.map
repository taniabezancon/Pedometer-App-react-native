{"version":3,"sources":["hooks.tsx"],"names":["React","useState","useEffect","HybridContext","Appearance","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","getColorScheme","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAMA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAA8B;AACxD,QAAM;AACJC,IAAAA,SAAS,EAAEC;AADP,MAIFP,KAAK,CAACQ,UAAN,CAAsCL,aAAtC,CAJJ;;AAKA,MAAII,gBAAgB,KAAKE,SAAzB,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AACD,SAAOH,gBAAP;AACD,CAVM;AAYP,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAuCC,IAAvC,EAAkD;AACvD,QAAM;AAAEP,IAAAA;AAAF,MAAgBD,YAAY,EAAlC;AACA,SAAOC,SAAS,KAAK,MAAd,GAAuBO,IAAvB,GAA8BD,KAArC;AACD;AAED,OAAO,SAASE,cAAT,CACLC,gBADK,EAELC,kBAFK,EAGLC,gBAHK,EAIL;AACA,QAAMC,eAAe,GAAGd,UAAU,CAACe,cAAX,EAAxB;;AAEA,MAAIH,kBAAJ,EAAwB;AACtBD,IAAAA,gBAAgB,GAAGG,eAAnB;AACD;;AAED,QAAM,CAACZ,SAAD,EAAYc,UAAZ,IAA0BnB,QAAQ,CAAYc,gBAAZ,CAAxC;AACA,QAAMM,YAAY,GAAGrB,KAAK,CAACsB,WAAN,CACnB,MAAOC,GAAP,IAA0B;AACxB,QAAIN,gBAAJ,EAAsB;AACpB,YAAMA,gBAAgB,CAACO,GAAjB,CAAqBD,GAArB,CAAN;AACD;;AACDH,IAAAA,UAAU,CAACG,GAAD,CAAV;AACD,GANkB,EAOnB,CAACN,gBAAD,CAPmB,CAArB,CARA,CAkBA;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,gBAAJ,EAAsB;AACpB,OAAC,eAAeQ,OAAf,GAAyB;AACxB,YAAIC,KAAK,GAAG,MAAMT,gBAAgB,CAACU,GAAjB,CAAqBZ,gBAArB,CAAlB;;AACA,YAAIW,KAAK,IAAIA,KAAK,KAAKpB,SAAvB,EAAkC;AAChCc,UAAAA,UAAU,CAACM,KAAD,CAAV;AACD;AACF,OALD;AAMD;AACF,GATQ,EASN,CAACpB,SAAD,EAAYS,gBAAZ,EAA8BE,gBAA9B,CATM,CAAT,CAnBA,CA8BA;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,gBAAD,IAAqBD,kBAAzB,EAA6C;AAC3CI,MAAAA,UAAU,CAACF,eAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACA,eAAD,EAAkBD,gBAAlB,EAAoCD,kBAApC,EAAwDI,UAAxD,CAJM,CAAT;AAMA,SAAO;AAAEd,IAAAA,SAAF;AAAae,IAAAA;AAAb,GAAP;AACD;AAED,OAAO,SAASO,mBAAT,GAIL;AACA,QAAM;AACJtB,IAAAA,SAAS,EAAEC;AADP,MAIFP,KAAK,CAACQ,UAAN,CAAsCL,aAAtC,CAJJ;;AAKA,QAAM0B,sBAAsB,GAAG,MAC7BtB,gBAAgB,CAACuB,mBAAjB,CAAqC,CAACvB,gBAAgB,CAACwB,gBAAvD,CADF;;AAEA,SAAO,CACLxB,gBAAgB,CAACwB,gBADZ,EAELxB,gBAAgB,CAACuB,mBAFZ,EAGLD,sBAHK,CAAP;AAKD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { Appearance } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = Appearance.getColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]}